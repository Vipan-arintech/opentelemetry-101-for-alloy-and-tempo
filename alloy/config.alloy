local.file "endpoints" {
    filename = "/etc/alloy/endpoints.json"
}

otelcol.receiver.otlp "otlp_receiver" {
    grpc {
        endpoint = "0.0.0.0:4317"
    }
    http {
        endpoint = "0.0.0.0:4318"
    }
    output {
        traces = [
            otelcol.processor.batch.traces.input,
            otelcol.connector.spanlogs.autologging.input,
        ]
        metrics = [
            otelcol.processor.batch.metrics.input,
        ]
        logs = [
            otelcol.exporter.loki.autologging.input,
        ]
    }
}

otelcol.processor.batch "traces" {
    send_batch_size = 1000
    send_batch_max_size = 2000
    timeout = "2s"
    output {
        traces = [otelcol.exporter.otlp.tempo.input]
    }
}

otelcol.processor.batch "metrics" {
    send_batch_size = 1000
    timeout = "10s"
    output {
        metrics = [otelcol.exporter.prometheus.default.input]
    }
}

otelcol.exporter.prometheus "default" {
  forward_to = [prometheus.remote_write.mimir.receiver]
}


otelcol.exporter.otlp "tempo" {
    client {
        auth = otelcol.auth.headers.tempo.handler
        endpoint = json_path(local.file.endpoints.content, ".traces.url")[0]
        tls {
            insecure = json_path(local.file.endpoints.content, ".traces.tls.insecure")[0]
            insecure_skip_verify = json_path(local.file.endpoints.content, ".traces.tls.insecureSkipVerify")[0]
        }
    }
}


otelcol.auth.headers "tempo" {
    header {
        key = "Authorization"
        value = join(["Basic ", json_path(local.file.endpoints.content, ".traces.basicAuthToken")[0]], "")
    }
}


prometheus.remote_write "mimir" {
    endpoint {
        url = json_path(local.file.endpoints.content, ".metrics.url")[0]
        basic_auth {
            username = json_path(local.file.endpoints.content, ".metrics.basicAuth.username")[0]
            password = json_path(local.file.endpoints.content, ".metrics.basicAuth.password")[0]
        }
    }
}

otelcol.exporter.loki "autologging" {
    forward_to = [loki.process.autologging.receiver]
}


otelcol.connector.spanlogs "autologging" {
    spans = true
    roots = true
    processes = false
    span_attributes = [ "http.method", "http.target", "http.status_code" ]
    overrides {
        trace_id_key = "traceId"
    }
    output {
        logs = [otelcol.exporter.loki.autologging.input]
    }
}


loki.process "autologging" {
  stage.json {
    expressions = {
      traceId = "",
      body    = "",
    }
  }

  stage.logfmt {
    mapping = {
      traceID = "traceID",
      level   = "level",
    }
  }

  stage.output {
    source = "body"
  }

  forward_to = [loki.write.autologging.receiver]
}

loki.write "autologging" {
    external_labels = {
        job = "alloy",
    }
    endpoint {
        url = json_path(local.file.endpoints.content, ".logs.url")[0]

        basic_auth {
            username = json_path(local.file.endpoints.content, ".logs.basicAuth.username")[0]
            password = json_path(local.file.endpoints.content, ".logs.basicAuth.password")[0]
        }
    }
}


otelcol.connector.spanmetrics "tracemetrics" {
    namespace = "traces.spanmetrics"
    dimension {
        name = "http.method"
    }
    dimension {
        name = "http.target"
    }
    dimension {
        name = "http.status_code"
    }
    dimension {
        name = "service.version"
    }
    histogram {
        explicit {}
    }
    exemplars {
        enabled = true
    }
    output {
        metrics = [otelcol.exporter.prometheus.tracemetrics.input]
    }
}

otelcol.exporter.prometheus "tracemetrics" {
    forward_to = [prometheus.remote_write.mimir.receiver]
}
otelcol.connector.servicegraph "tracemetrics" {
    dimensions = [
        "http.method",
        "http.target",
        "http.status_code",
        "service.version",
    ]
    output {
        metrics = [otelcol.exporter.prometheus.tracemetrics.input]
    }
}





faro.receiver "todo" {
    server {
        listen_address           = "0.0.0.0"
        listen_port              = 12346
        cors_allowed_origins     = ["*"]

        max_allowed_payload_size = "10MiB"

        rate_limiting {
            rate = 100
        }
    }

    sourcemaps { }

    output {
        logs   = [loki.process.faro.receiver]
        traces = [otelcol.processor.batch.traces.input]
    }
}



loki.process "faro" {
    forward_to = [loki.write.faro.receiver]

    stage.logfmt {
        mapping = {
            "app_name" = "app_name",
        }
    }

    stage.labels {
        values = {
            service_name = "app_name",
        }
    }
}



loki.write "faro" {
    endpoint {
        url = json_path(local.file.endpoints.content, ".logs.url")[0]

        basic_auth {
            username = json_path(local.file.endpoints.content, ".logs.basicAuth.username")[0]
            password = json_path(local.file.endpoints.content, ".logs.basicAuth.password")[0]
        }
    }
}